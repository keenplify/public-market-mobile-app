// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Image {
  id        Int       @id @default(autoincrement())
  url       String
  thumbUrl  String
  product   Product?  @relation(fields: [productId], references: [id])
  productId Int?
  rating    Rating?   @relation(fields: [ratingId], references: [id])
  ratingId  Int?
  owner     User      @relation(fields: [ownerId], references: [id])
  ownerId   Int
  message   Message?   @relation(fields: [messageId], references: [id])
  messageId Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id         Int        @id @default(autoincrement())
  name       String
  region     String
  province   String
  city       String
  barangay   String
  house      String
  postalCode String
  user       User       @relation(fields: [userId], references: [id])
  userId     Int        @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum Genders {
  MALE
  FEMALE
}

enum UserTypes {
  ADMIN
  CUSTOMER
  SELLER
}

enum SubOrderStatuses {
  CANCELLED
  PREPAIRING
  TO_DELIVER
  DELIVERING
  DELIVERED
  DECLINED
}

enum ModesOfPayment {
  COD
  GCASH
  PAYMAYA
}

enum NotificationTypes {
  ORDER_STATUS_UPDATE
  NEW_ORDER
  MESSAGE
  REVIEW
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  number   String    @unique
  username String    @unique 
  password String
  gender   Genders   @default(MALE)
  type     UserTypes @default(CUSTOMER)
  address  Address?
  products Product[]
  ratings  Rating[]
  images   Image[]
  orders   Order[]
  cartItems CartItem[]
  subOrders   SubOrder[]
  messagesMade  Message[] @relation(name:"From")
  messagesReceived  Message[] @relation(name:"To")
  notifications Notification[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Rating {
  id        Int     @id @default(autoincrement())
  text      String
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     
  product   Product @relation(fields: [productId], references: [id])
  productId Int     
  rating    Float
  images    Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  seller      User     @relation(fields: [sellerId], references: [id])
  sellerId    Int     
  description String
  price       Int
  images      Image[]
  ratings     Rating[]
  cartItems   CartItem[]
  subOrders   SubOrder[]
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id          Int     @id @default(autoincrement())
  customer    User    @relation(fields: [customerId], references: [id])
  customerId  Int
  subOrders   SubOrder[]
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  modeOfPayment ModesOfPayment
}

model SubOrder {
  id          Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  status      SubOrderStatuses @default(PREPAIRING)
  order       Order?     @relation(fields: [orderId], references: [id])
  orderId     Int?
  seller     User   @relation(fields: [sellerId], references: [id])
  sellerId  Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
}

model CartItem {
  id          Int       @id @default(autoincrement())
  quantity    Int
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  customer    User      @relation(fields: [customerId], references: [id])
  customerId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
}


model Message {
  id          Int   @id @default(autoincrement())
  message     String
  images      Image[]
  from        User  @relation(fields: [fromId], references: [id], name: "From")
  fromId      Int
  to        User  @relation(fields: [toId], references: [id], name: "To")
  toId      Int
createdAt DateTime @default(now())
  updatedAt DateTime   @default(now())  @updatedAt
}

model Notification {
  id           Int   @id @default(autoincrement())
  description  String
  title        String
  type        NotificationTypes
  read         Boolean @default(false)
  urgent       Boolean @default(false)
  url          String?
  user         User @relation(fields: [userId], references: [id])
  userId        Int
  referencedId  Int
createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}